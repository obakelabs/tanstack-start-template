/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SignInImport } from './routes/sign-in'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as ProtectedAccountSettingsImport } from './routes/_protected/account/settings'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAccountSettingsRoute = ProtectedAccountSettingsImport.update({
  id: '/account/settings',
  path: '/account/settings',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/account/settings': {
      id: '/_protected/account/settings'
      path: '/account/settings'
      fullPath: '/account/settings'
      preLoaderRoute: typeof ProtectedAccountSettingsImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedAccountSettingsRoute: typeof ProtectedAccountSettingsRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedAccountSettingsRoute: ProtectedAccountSettingsRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/sign-in': typeof SignInRoute
  '/terms': typeof TermsRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/account/settings': typeof ProtectedAccountSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/sign-in': typeof SignInRoute
  '/terms': typeof TermsRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/account/settings': typeof ProtectedAccountSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/sign-in': typeof SignInRoute
  '/terms': typeof TermsRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/account/settings': typeof ProtectedAccountSettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/privacy'
    | '/sign-in'
    | '/terms'
    | '/dashboard'
    | '/account/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/privacy'
    | '/sign-in'
    | '/terms'
    | '/dashboard'
    | '/account/settings'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/privacy'
    | '/sign-in'
    | '/terms'
    | '/_protected/dashboard'
    | '/_protected/account/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  SignInRoute: typeof SignInRoute
  TermsRoute: typeof TermsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SignInRoute: SignInRoute,
  TermsRoute: TermsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/privacy",
        "/sign-in",
        "/terms"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/dashboard",
        "/_protected/account/settings"
      ]
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/_protected/account/settings": {
      "filePath": "_protected/account/settings.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
